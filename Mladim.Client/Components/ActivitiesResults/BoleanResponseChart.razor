@using Mladim.Client.Models;
@using Mladim.Client.ViewModels.Survey;
@using Syncfusion.Blazor.Charts
@using Mladim.Client.Services.SubjectServices.Contracts;
@using Mladim.Domain.Enums;
@using Mladim.Domain.Extensions;



<SfChart Height="90" Title="@Response.Question">    
    <ChartPrimaryXAxis Visible="false" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"/>   
    <ChartPrimaryYAxis Visible="false"/>
    <ChartArea>
        <ChartAreaBorder Width="0"></ChartAreaBorder>
    </ChartArea>   
    <ChartSeriesCollection>      
        <ChartSeries DataSource="@ChartData" XName="Name" Fill="#4DA456" YName="ThumbsUpValue" Type="ChartSeriesType.StackingBar100">
            <ChartCornerRadius BottomLeft="10"  TopLeft="10"/>            
            <ChartMarker>
                <ChartDataLabel Visible="true" Name="ThumbsUpName"  Position="Syncfusion.Blazor.Charts.LabelPosition.Middle">
                    <ChartDataLabelFont Color="#ffffff"></ChartDataLabelFont>
                    </ChartDataLabel>
            </ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@ChartData" XName="Name" Fill="#8ED974" YName="ThumbsDownValue" Type="ChartSeriesType.StackingBar100">
            <ChartCornerRadius BottomRight="10" TopRight="10"/>          
            <ChartMarker>
                <ChartDataLabel Visible="true" Name="ThumbsDownName"  Position="Syncfusion.Blazor.Charts.LabelPosition.Middle">
                    <ChartDataLabelFont Color="#ffffff"></ChartDataLabelFont>
                </ChartDataLabel>
            </ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>





@code 
{
    [Parameter]
    public SurveyBoleanResponsesGroupedByQuestion Response { get; set; }

    public List<BoleanResponseChartData> ChartData = new List<BoleanResponseChartData>();

    protected override void OnInitialized()
    {
        int total = this.Response.ParticipantQuestionResponses.Count;

        if (Response is ISelectableReponseType selectable)
        {
            var response = selectable.ParticipantsByResponseTypes(ParticipantPredicate.None.Predicate).Select(s => s.InPercent(total));
            this.ChartData.Add(new BoleanResponseChartData(response));           
        }
    }   

    public class BoleanResponseChartData
    {
        public string Name => "boleanType";

        public string ThumbsUp => SurveyBooleanResponseType.ThumpsUp.GetDisplayAttribute();
        public string ThumbsUpName => $"{ThumbsUp} {ThumbsUpValue}%";

        public double ThumbsUpValue { get; }

        public string ThumbsDown => SurveyBooleanResponseType.ThumpsDown.GetDisplayAttribute();

        public string ThumbsDownName => $"{ThumbsDown} {ThumbsDownValue}%";

        public double ThumbsDownValue { get; }


        public BoleanResponseChartData(IEnumerable<ParticipantsByResponseType> responseTypes)
        {
            this.ThumbsUpValue   = FindUnit(responseTypes, this.ThumbsUp);
            this.ThumbsDownValue = FindUnit(responseTypes, this.ThumbsDown);            
        }

        private double FindUnit(IEnumerable<ParticipantsByResponseType> responseTypes, string type) =>
            responseTypes.FirstOrDefault(rt => rt.ResponseType == type)?.Unit ?? 0;
    }
}
