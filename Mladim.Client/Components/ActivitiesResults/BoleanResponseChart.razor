@using Mladim.Client.Models;
@using Mladim.Client.ViewModels.Survey;
@using Syncfusion.Blazor.Charts
@using Mladim.Client.Services.SubjectServices.Contracts;
@using Mladim.Domain.Enums;
@using Mladim.Domain.Extensions;


    <MudText  Color="Color.Tertiary" Typo="Typo.h2">@Response.Question</MudText>
    <SfChart Height="30">
        <ChartMargin Left="0" Right="0" Top="0" Bottom="0"></ChartMargin>
        <ChartPrimaryXAxis Visible="false" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"/>   
        <ChartPrimaryYAxis Visible="false"/>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>   
        <ChartSeriesCollection>
            @foreach (var seriesData in ResponseData)
            {
                <ChartSeries DataSource="@seriesData.Data" Fill="@seriesData.Fill" XName="@seriesData.XName" YName="@seriesData.YName" Type="ChartSeriesType.StackingBar100">
                
                    <ChartCornerRadius BottomLeft="@seriesData.LeftRadius" TopLeft="@seriesData.LeftRadius" BottomRight="@seriesData.RightRadius" TopRight="@seriesData.RightRadius" />
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Name="Label" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle">
                           @*  <Template>
                            @{
                                var data = context as ChartDataPointInfo;
                                <table>
                                    <tr><td align="center"> @data.Y</td></tr>
                                </table>
                            }
                            </Template> *@
                            <ChartDataLabelFont Color="#ffffff"></ChartDataLabelFont>                                            
                        </ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>
            }
        </ChartSeriesCollection>
    </SfChart>







@code 
{
    [Parameter]
    public SurveyBoleanResponsesGroupedByQuestion Response { get; set; }

    public List<ResponseBar> ResponseData = new List<ResponseBar>();

    protected override void OnInitialized()
    {
        int total = this.Response.ParticipantQuestionResponses.Count;

        if (Response is ISelectableReponseType selectable)
        {
            var responseBars = selectable.ParticipantsByResponseTypes(ParticipantPredicate.None.Predicate)
                .Select(s => s.InPercent(total))
                .Where(pr => pr.Unit > 0)
                .Select(pr => (type: pr.ResponseType, barList: new List<BarValue>(new[] { BarValue.CreateBarValue(pr.ResponseType, pr.Unit) })))
                .Select(bv => ResponseBar.CreateResponseBar(Fill(bv.type), bv.barList))
                .ToList();

            responseBars.First().LeftRadius = 10;
            responseBars.Last().RightRadius = 10;

            this.ResponseData.AddRange(responseBars);
        }
    }   

    private string Fill(string responseType)
    {
        if (responseType == SurveyBooleanResponseType.ThumpsUp.GetDisplayAttribute())
            return "#4DA456";
        else if (responseType == SurveyBooleanResponseType.ThumpsDown.GetDisplayAttribute())
            return "#8ED974";
       else
            return "#000000";
    }    
}
