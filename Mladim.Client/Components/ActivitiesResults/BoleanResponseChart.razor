@using Mladim.Client.Models;
@using Mladim.Client.ViewModels.Survey;
@using Syncfusion.Blazor.Charts
@using Mladim.Client.Services.SubjectServices.Contracts;
@using Mladim.Domain.Enums;
@using Mladim.Domain.Extensions;


    <MudText  Color="Color.Tertiary" Typo="Typo.h2">@Response.SurveyQuestion.Texts.FirstOrDefault()</MudText>
    <SfChart Height="30">
        <ChartMargin Left="0" Right="0" Top="0" Bottom="0"></ChartMargin>
        <ChartPrimaryXAxis Visible="false" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"/>   
        <ChartPrimaryYAxis Visible="false"/>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>   
        <ChartSeriesCollection>
            @foreach (var seriesData in StackBars)
            {
                <ChartSeries DataSource="@seriesData.Data" Fill="@seriesData.Fill" XName="@seriesData.XName" YName="@seriesData.YName" Type="ChartSeriesType.StackingBar100">
                
                    <ChartCornerRadius BottomLeft="@seriesData.LeftRadius" TopLeft="@seriesData.LeftRadius" BottomRight="@seriesData.RightRadius" TopRight="@seriesData.RightRadius" />
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Name="Label" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle">
                           @*  <Template>
                            @{
                                var data = (context as ChartDataPointInfo);
                               
                                    <table>
                                        <tr>
                                        <td align="center">
                                            <span style="color:white;" class="@data.Text mb-1"></span>
                                        </td>
                                        <td align="center" style="color:white;">@($" {data.Y}%")</td>
                                    </tr>
                                </table>                                
                            }
                            </Template>    *@
                            <ChartDataLabelFont Color="#ffffff"></ChartDataLabelFont>
                        </ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>
            }
        </ChartSeriesCollection>
    </SfChart>







@code 
{
    [Parameter]
    public SurveyResponsesGroupedBySelectableQuestionVM Response { get; set; } = default!;

    public List<ResponseBar> StackBars = new List<ResponseBar>();

    PercantagesUnit percantageResponseType = new PercantagesUnit();

    protected override void OnInitialized()
    {

        var stackBars = percantageResponseType.ResponseTypeByCriteria(Response, new[] { ParticipantPredicate.None })
           .FirstOrDefault()?
           .ReponseTypesPerCriterion
           .Where(rt => rt.Value > 0)
           .Select(rt => (type: rt.ResponseType, barList: new List<BarValue>(new[] { BarValue.CreateBarValue(rt.ResponseType.GetDisplayAttribute(), rt.Value) })))
           .OrderBy(rt => rt.type)
           .Select(bv => ResponseBar.CreateResponseBar(Fill(bv.type), bv.barList))
           .ToList();

        if (stackBars is null)
            return;

        stackBars.First().LeftRadius = 10;
        stackBars.Last().RightRadius = 10;

        this.StackBars.AddRange(stackBars);      
    }   


    private string Fill(Enum responseType) => responseType switch
    {
        SurveyBooleanResponseType.ThumpsUp => "#4DA456",
        SurveyBooleanResponseType.ThumpsDown => "#8ED974",
        _ => throw new NotImplementedException(),
    };   
}
