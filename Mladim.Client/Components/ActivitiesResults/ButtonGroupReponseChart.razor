@using Mladim.Client.Models;
@using Mladim.Client.ViewModels.Survey;
@using Mladim.Domain.Enums;
@using Mladim.Domain.Extensions;
@using Syncfusion.Blazor.Charts;


@if(Response != null)
{
    <MudStack style="width:100%;">
        <MudText Typo="Typo.h2" Color="Color.Tertiary" Align="Align.Center">@Response.QuestionDescription</MudText>
        @foreach (var buttonResponse in Response.ButtonGroupResponses)
        {
            <SfChart Height="90" Title="@buttonResponse?.Question" >
                <ChartTitleStyle Size="0.9rem" Color="#43525d" FontFamily="Poppins" FontWeight="600"/>
                <ChartPrimaryXAxis Visible="false" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" />
                <ChartPrimaryYAxis Visible="false" />
                <ChartArea>
                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                </ChartArea>
                <ChartSeriesCollection>
                    @foreach (var seriesData in GetResponseBars(buttonResponse))
                    {
                        <ChartSeries DataSource="@seriesData.Data" Fill="@seriesData.Fill" XName="@seriesData.XName" YName="@seriesData.YName" Type="ChartSeriesType.StackingBar100">
                            <ChartCornerRadius BottomLeft="@seriesData.LeftRadius" TopLeft="@seriesData.LeftRadius" BottomRight="@seriesData.RightRadius" TopRight="@seriesData.RightRadius"/>
                            <ChartMarker>
                                <ChartDataLabel Visible="true" Name="Label" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle">
                                    <ChartDataLabelFont Color="#ffffff"></ChartDataLabelFont>
                                </ChartDataLabel>
                            </ChartMarker>
                        </ChartSeries>
                    }       
                </ChartSeriesCollection>
            </SfChart>
        }
    </MudStack>
}




@code 
{
    [Parameter]
    public SurveyButtonGroupResponsesGroupedByQuestion Response { get; set; } = default!;  


    private IEnumerable<ResponseBar> GetResponseBars(SurveyButtonResponseGroupedByQuestion ButtonResponse)
    {
        int total = ButtonResponse.ParticipantQuestionResponses.Count;

        if (ButtonResponse is ISelectableReponseType selectable)
        {
            var responseBars = selectable.ParticipantsByResponseTypes(ParticipantPredicate.None.Predicate)
                .Select(s => s.InPercent(total))
                .Where(pr => pr.Unit > 0)
                .Select(pr => (type: pr.ResponseType, barList: new List<BarValue>(new[] { BarValue.CreateBarValue(pr.ResponseType, pr.Unit) })))
                .Select(bv => ResponseBar.CreateResponseBar(Fill(bv.type), bv.barList))
                .ToList();

            responseBars.First().LeftRadius = 10;
            responseBars.Last().RightRadius = 10;

            return responseBars;
        }

        return Enumerable.Empty<ResponseBar>();
    }

    private string Fill(string responseType)
    {
        if (responseType == SurveyButtonResponseType.VeryCorrect.GetDisplayAttribute())
            return "#4DA456";
        else if (responseType == SurveyButtonResponseType.PartiallyCorrect.GetDisplayAttribute())
            return "#394241";
        else if (responseType == SurveyButtonResponseType.Correct.GetDisplayAttribute())
            return "#ffc700";
        else if (responseType == SurveyButtonResponseType.Incorrect.GetDisplayAttribute())
            return "#8ED974";      
        else
            return "#000000";
    }
}
