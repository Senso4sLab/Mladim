@using Mladim.Client.Models;
@using Mladim.Client.ViewModels.Survey;
@using Mladim.Domain.Enums;
@using Mladim.Domain.Extensions;
@using Syncfusion.Blazor.Charts;


@if (Response != null)
{
    <MudText  Typo="Typo.h2" Color="Color.Tertiary">@Response.SurveyQuestion.Header</MudText>       
    @foreach (var response in Response.SelectableResponseGroups)
    {
        <MudStack Spacing="1">       
            <MudText  Typo="Typo.h2" Color="Color.Tertiary">@response.SurveyQuestion.Texts.FirstOrDefault()</MudText>
            <SfChart Height="30">
                <ChartMargin Left="0" Right="0" Top="0" Bottom="0"></ChartMargin>                
                <ChartPrimaryXAxis Visible="false" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" />
                <ChartPrimaryYAxis Visible="false" />
                <ChartArea>
                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                </ChartArea>
                <ChartSeriesCollection>
                        @foreach (var seriesData in GetStackBars(response))
                    {
                        <ChartSeries DataSource="@seriesData.Data" Fill="@seriesData.Fill" XName="@seriesData.XName" YName="@seriesData.YName" Type="ChartSeriesType.StackingBar100">
                            <ChartCornerRadius BottomLeft="@seriesData.LeftRadius" TopLeft="@seriesData.LeftRadius" BottomRight="@seriesData.RightRadius" TopRight="@seriesData.RightRadius"/>
                            <ChartMarker>
                                <ChartDataLabel Visible="true" Name="Label" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle">
                                    <ChartDataLabelFont Color="#ffffff"></ChartDataLabelFont>
                                </ChartDataLabel>
                            </ChartMarker>
                        </ChartSeries>
                    }       
                </ChartSeriesCollection>
            </SfChart>
         </MudStack>
    }
} 


@code 
{
    [Parameter]
    public SurveyResponsesGroupedByMultipleSelectableQuestionVM Response { get; set; } = default!;

    PercantagesUnit percantageResponseType = new PercantagesUnit();


    private IEnumerable<ResponseBar> GetStackBars(SurveyResponsesGroupedBySelectableQuestionVM selectableResponse)
    {
        var stackBars = percantageResponseType.ResponseTypeByCriteria(selectableResponse, new[] { ParticipantPredicate.None })
            .FirstOrDefault()?
            .ReponseTypesPerCriterion
            .Where(rt => rt.Value > 0)
            .Select(rt => (type: rt.ResponseType, barList: new List<BarValue>(new[] { BarValue.CreateBarValue(rt.ResponseType.GetDisplayAttribute(), rt.Value) })))
            .OrderBy(rt => rt.type)
            .Select(bv => ResponseBar.CreateResponseBar(Fill(bv.type), bv.barList))
            .ToList();

        if (stackBars is null)
            return Enumerable.Empty<ResponseBar>(); 

        stackBars.First().LeftRadius = 10;
        stackBars.Last().RightRadius = 10;

        return stackBars;       
    }

    private string Fill(Enum responseType) => responseType switch
    {
        SurveyButtonResponseType.VeryCorrect => "#4DA456",
        SurveyButtonResponseType.PartiallyCorrect => "#394241",
        SurveyButtonResponseType.Correct => "#ffc700",
        SurveyButtonResponseType.Incorrect => "#8ED974",
        _ => throw new NotImplementedException(),
    };    
}
