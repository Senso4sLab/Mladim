@using System.Reflection;
@using System.ComponentModel.DataAnnotations;


@typeparam TItem where TItem : struct, Enum


<MudSelect MultiSelection="true" Lines=@Lines T="TItem" SelectedValues="EnumValues" SelectedValuesChanged="EnumValuesChanged" ToStringFunc="@(item => item.GetDisplayAttribute())" Label="@Label" ReadOnly="@ReadOnly" AdornmentColor="Color.Primary" Variant="Variant.Outlined">
    @foreach (var item in Enum.GetValues<TItem>())
    {
        <MudSelectItem  Value="@item">

            <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
           
                @item.GetDisplayAttribute()

                @if (ToolTip)
                {
                    <MudTooltip Text="@(item.GetDescriptionAttributeString())">
                        <MudIconButton Size=Size.Small Icon="@Icons.Material.Filled.QuestionMark" />
                    </MudTooltip>
                }

              </MudStack>
               
        
        </MudSelectItem>
    }
</MudSelect>


@code {


    [Parameter]
    public bool ToolTip { get; set; } = false;

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public int Lines { get; set; } = 1;

    [Parameter]
    public IEnumerable<TItem> EnumValues { get; set; }
    [Parameter]
    public EventCallback<IEnumerable<TItem>> EnumValuesChanged { get; set; } 

}
