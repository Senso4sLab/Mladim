@using System.Reflection;
@using System.ComponentModel.DataAnnotations;


@typeparam TItem where TItem : struct, Enum


<MudSelect MultiSelection="true" T="TItem" SelectedValues="EnumValues" SelectedValuesChanged="EnumValuesChanged" ToStringFunc="@(item => item.GetDisplayAttributeString())" Label="@Label" ReadOnly="@ReadOnly" AdornmentColor="Color.Primary" Variant="Variant.Outlined">
    @foreach (var item in Enum.GetValues<TItem>())
    {
        <MudSelectItem Value="@item">@item.GetDisplayAttributeString()</MudSelectItem>
    }
</MudSelect>


@code {

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public IEnumerable<TItem> EnumValues { get; set; }
    [Parameter]
    public EventCallback<IEnumerable<TItem>> EnumValuesChanged { get; set; } 

}
