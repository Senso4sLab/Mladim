@using System.Reflection;
@using System.ComponentModel.DataAnnotations;


@typeparam TItem where TItem : struct, Enum


<MudSelect MultiSelection="true" T="TItem" SelectedValues="EnumValues" SelectedValuesChanged="EnumValuesChanged" ToStringFunc="@(item => DisplayAttribute(item))" Label="@Label" ReadOnly="@ReadOnly" AdornmentColor="Color.Primary" Variant="Variant.Outlined">
    @foreach (var item in Enum.GetValues<TItem>())
    {
        <MudSelectItem Value="@item">@DisplayAttribute(item)</MudSelectItem>
    }
</MudSelect>


@code {

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public IEnumerable<TItem> EnumValues { get; set; }
    [Parameter]
    public EventCallback<IEnumerable<TItem>> EnumValuesChanged { get; set; }


    private string DisplayAttribute(TItem value)
    {
        var type = value.GetType();

        var fi = type.GetField(value.ToString());

        if (fi == null)
            return string.Empty;

        if (fi.GetCustomAttribute(typeof(DisplayAttribute)) is DisplayAttribute displayAttribute)
            return displayAttribute.Name!;
        else
            return value.ToString();
    }

    private IEnumerable<TItem> InitialValues(TItem value) =>
        Enum.GetValues<TItem>()
          .Where(val => value.HasFlag(val))
          .ToList() ?? Enumerable.Empty<TItem>();    

}
