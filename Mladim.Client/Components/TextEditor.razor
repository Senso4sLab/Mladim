
<div>
    <div style="height:150px; width:100%; display:inline-block">
        <BlazoredTextEditor 
            @ref="@richEditor"         
            Placeholder="@Placeholder">
            <ToolbarContent>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>

            </EditorContent>
        </BlazoredTextEditor>
    </div>
</div>

@code
{
    [Parameter]
    public string Placeholder { get; set; } = default!;   

    public BlazoredTextEditor? richEditor { get; set; } = default!;

    public async Task EnableEditor(bool enable)
    {
        if (richEditor == null)
            return;

        bool loading = true;

        while (loading)
        {
            try
            {
                await this.richEditor!.EnableEditor(enable);
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }      
    }

    public async Task SetHTMLTextAsync(string text)
    {
        if (string.IsNullOrWhiteSpace(text) || this.richEditor == null)
            return;

        bool loading = true;

        while (loading)
        {
            try
            {
                await this.richEditor!.LoadHTMLContent(text);
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }
    }

    public async Task<string> GetHTMLTextAsync()
    {
        if (richEditor == null)
            return string.Empty;

        var quillHtml = await this.richEditor!.GetHTML();
        return quillHtml == "<p><br></p>" ? string.Empty : quillHtml;
    }
}
