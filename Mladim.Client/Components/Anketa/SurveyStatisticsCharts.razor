@using Mladim.Client.Models;
@using Mladim.Client.ViewModels.Survey;
@using Mladim.Domain.Enums;
@using Syncfusion.Blazor.Charts
@using Mladim.Domain.Extensions



<MudStack >
    @foreach (var tuple in questionsResponseBars)
    {
        <SurveyStatisticsChart Parent="@Parent" QuestionsResponseBar="@tuple.qrb" Title="@tuple.title"></SurveyStatisticsChart>
    }
</MudStack>
    


@code 
{

    [Parameter]
    public QuestionSurveyStatisticsVM QuestionStatistics { get; set; } = default!;       

    [Parameter]
    public OrganizationStatisticsTab Parent { get; set; } = default!;

    private List<(string title,QuestionResponseBar qrb)> questionsResponseBars = default!;
    

    protected override void OnInitialized()
    {
        questionsResponseBars = this.QuestionStatistics.SurveyQuestion.Texts
          .Select((q, index) => new QuestionResponseBar(q, GetStackedBarData(index)))
          .Select(qrb => (GetTitle(qrb), qrb ))
          .ToList();       
    }

    private string GetTitle(QuestionResponseBar responseBar)
    {
        if (QuestionStatistics.SurveyQuestion.Header is string header)
            return $"{header} {responseBar.Question}";

        return responseBar.Question;
    }   


    private IEnumerable<ResponseBar> GetStackedBarData(int index) => 
        this.GetStackedBarData(QuestionStatistics.SurveyQuestion.Type, QuestionStatistics.Statistics.QuestionsResponseTypes[index]);

    private List<ResponseBar> GetStackedBarData(SurveyQuestionType type, QuestionResponseStatisticsVM questionResponseStatistics)
    {
        var result = questionResponseStatistics.ResponseTypes
            .Select(rt => (enumType: StackedBarName(type, rt.ResponseType), value: rt.Value))
            .OrderBy(rt => rt.enumType)
            .Select(rt => (fill: Fill(rt.enumType), barList: new List<BarValue>(new[] { BarValue.CreateBarValue(rt.enumType.GetDisplayAttribute(), rt.value) })))
            .Select(bv => ResponseBar.CreateResponseBar(bv.fill, bv.barList))
            .ToList();

        result.First().LeftRadius = 10;
        result.Last().RightRadius = 10;

        return result;
    }

    // public void Dispose()
    // {      
    //     Parent.RemoveExportChart(ExportChartToImage());
    // }

    



    private Enum StackedBarName(SurveyQuestionType type, string name) =>
     type switch
     {
         SurveyQuestionType.Boolean => Enum.Parse<SurveyBooleanResponseType>(name),
         SurveyQuestionType.Rating => Enum.Parse<SurveyRatingResponseType>(name),
         SurveyQuestionType.Multiple => Enum.Parse<SurveyButtonResponseType>(name),
         SurveyQuestionType.MultipleRepetitive => Enum.Parse<SurveyRepetitiveButtonResponseType>(name),
         _ => throw new NotImplementedException(),
     };  


    private string Fill(Enum responseType) =>
         responseType switch
        {
            SurveyBooleanResponseType.ThumpsUp   => "#4DA456",
            SurveyBooleanResponseType.ThumpsDown => "#8ED974",
            SurveyRatingResponseType.OneSmile    => "#7cc769",
            SurveyRatingResponseType.TwoSmiles   => "#394241",
            SurveyRatingResponseType.ThreeSmiles => "#ffc700",
            SurveyRatingResponseType.FourSmiles  => "#8ED974",
            SurveyRatingResponseType.FiveSmiles  => "#4DA456",
            SurveyButtonResponseType.VeryCorrect => "#4DA456",
            SurveyButtonResponseType.PartiallyCorrect => "#394241",
            SurveyButtonResponseType.Correct => "#ffc700",
            SurveyButtonResponseType.Incorrect => "#8ED974",
            SurveyRepetitiveButtonResponseType.Greatly => "#4DA456",
            SurveyRepetitiveButtonResponseType.Quite => "#394241",
            SurveyRepetitiveButtonResponseType.Little => "#ffc700",
            SurveyRepetitiveButtonResponseType.None => "#8ED974",   
            _ => throw new NotImplementedException(),
        };


   
}
