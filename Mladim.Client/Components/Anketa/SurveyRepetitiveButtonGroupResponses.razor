@using Mladim.Client.ViewModels.Survey;
@using Mladim.Domain.Enums;
@using Mladim.Domain.Extensions;
@using Mladim.Domain.Models.Survey.ParticipantResponseTypes;


<style>
    .bold_font {
        font-weight: bold;
    }

    td {
        text-align: center;
    }

    th {
        color: #777A98;
    }

    .normal_font {
        font-weight: normal;
    }
</style>


<MudPaper Class="p-2" Elevation="3">
    <MudText Color="Color.Tertiary" Class="py-3 px-2" Typo="Typo.h2">@Response.SurveyQuestion.Header</MudText>

    @foreach(var buttonResponse in Response.SelectableResponseGroups)
    {
        <MudText Color="Color.Tertiary" Class="py-3 px-2" Typo="Typo.h2">@buttonResponse.SurveyQuestion.Texts.FirstOrDefault()</MudText>
        <table class="table">
            <thead>
                <tr class="d-flex">
                    <th scope="col" class="col-3">@Context.CriterionSelector.Name</th>
                    @foreach (var type in AvailableResponseTypes)
                    {
                        <th class="text-center col-1" scope="col">@type.GetDisplayAttribute()</th>
                    }
                    <th class="text-center bold_font col-1" scope="col">Skupaj</th>
                    <th class="col-4" scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var row in GetContingencyTable(buttonResponse).ParticipantsByCriteria)
                {
                    <tr class="d-flex">
                        <th scope="row" class="@(row.Criterion=="Skupaj" ? "bold_font" : "normal_font") col-3">@row.Criterion</th>


                        @foreach (var column in AvailableResponseTypes)
                        {
                            <td class="@(row.Criterion == "Skupaj" ? "bold_font": "normal_font") col-1">@(row.ReponseTypesPerCriterion.FirstOrDefault(rt => rt.ResponseType.ToString() == column.ToString())?.Value ?? 0)</td>
                        }

                        <td class="@(row.Criterion=="Skupaj" ? "bold_font" : "normal_font") col-1">@Math.Round(row.ReponseTypesPerCriterion.Sum(pr => pr.Value), 0)</td>

                        <th scope="col" class=" col-4"></th>
                    </tr>
                }                   
            </tbody>
        </table>
    }
</MudPaper>

@code
{
    [Parameter]
    public SurveyResponsesGroupedByMultipleSelectableQuestionVM Response { get; set; } = default!;

    [Parameter]
    public CogntigencyTableContext Context { get; set; } = default!; 
    
    private IEnumerable<SurveyRepetitiveButtonResponseType> AvailableResponseTypes = Enum.GetValues<SurveyRepetitiveButtonResponseType>().ToList();

    private ContingencyTable GetContingencyTable(ISelectableQuestionReponseCalculator reponseType) =>
        this.Context.GetContingencyTableFor(reponseType);


   
        
}
