@using Mladim.Client.Models;
@using Mladim.Client.ViewModels.Survey;
@using Mladim.Domain.Enums;
@using Syncfusion.Blazor.Charts
@using Mladim.Domain.Extensions


<MudStack>

    @if(!string.IsNullOrEmpty(QuestionStatistics.SurveyQuestion.Header))
    {
       <MudText Color="Color.Tertiary" Typo="Typo.h2">@QuestionStatistics.SurveyQuestion.Header</MudText>
    }    

    @foreach (var questionResponseBar in questionsResponseBars)
    {
        <MudText Color="Color.Tertiary" Typo="Typo.h2">@questionResponseBar.Question</MudText>

        <SfChart Height="30" Width="@Width" EnableAnimation="false">
            <ChartMargin Left="0" Right="0" Top="0" Bottom="0"></ChartMargin>
            <ChartPrimaryXAxis Visible="false" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" />
            <ChartPrimaryYAxis Visible="false" />
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>
            <ChartSeriesCollection>
                @foreach (var seriesData in questionResponseBar.ResponseBar)
                {
                    <ChartSeries DataSource="@seriesData.Data" Fill="@seriesData.Fill" XName="@seriesData.XName" YName="@seriesData.YName" Type="ChartSeriesType.StackingBar100">

                        <ChartCornerRadius BottomLeft="@seriesData.LeftRadius" TopLeft="@seriesData.LeftRadius" BottomRight="@seriesData.RightRadius" TopRight="@seriesData.RightRadius" />
                        <ChartMarker>
                            <ChartDataLabel Visible="true" Name="Label" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle">
                                <ChartDataLabelFont Color="#ffffff"></ChartDataLabelFont>
                            </ChartDataLabel>
                        </ChartMarker>
                    </ChartSeries>
                }
            </ChartSeriesCollection>
        </SfChart>
    }    

</MudStack>
    


@code 
{

    [Parameter]
    public QuestionSurveyStatisticsVM QuestionStatistics { get; set; } = default!;

    [Parameter]
    public string Width { get; set; } = "100%";

    [Parameter]
    public System.Action ExportChartAsImage { get; set; } = default!;



    private List<QuestionResponseBar> questionsResponseBars = default!;    

    protected override void OnInitialized()
    {
        ExportChartAsImage += () =>
        { 
            Console.WriteLine("test"); 
        };
    }

    protected override void OnParametersSet()
    {
        questionsResponseBars = this.QuestionStatistics.SurveyQuestion.Texts
           .Select((q, index) => new QuestionResponseBar(q, GetStackedBarData(index)))
           .ToList();
    }

    private IEnumerable<ResponseBar> GetStackedBarData(int index) => 
    this.GetStackedBarData(QuestionStatistics.SurveyQuestion.Type, QuestionStatistics.Statistics.QuestionsResponseTypes[index]);

    private List<ResponseBar> GetStackedBarData(SurveyQuestionType type, QuestionResponseStatisticsVM questionResponseStatistics)
    {
        var result = questionResponseStatistics.ResponseTypes
            .Select(rt => (enumType: StackedBarName(type, rt.ResponseType), value: rt.Value))
            .OrderBy(rt => rt.enumType)
            .Select(rt => (fill: Fill(rt.enumType), barList: new List<BarValue>(new[] { BarValue.CreateBarValue(rt.enumType.GetDisplayAttribute(), rt.value) })))
            .Select(bv => ResponseBar.CreateResponseBar(bv.fill, bv.barList))
            .ToList();

        result.First().LeftRadius = 10;
        result.Last().RightRadius = 10;

        return result;
    }


 



    private Enum StackedBarName(SurveyQuestionType type, string name) =>
     type switch
     {
         SurveyQuestionType.Boolean => Enum.Parse<SurveyBooleanResponseType>(name),
         SurveyQuestionType.Rating => Enum.Parse<SurveyRatingResponseType>(name),
         SurveyQuestionType.Multiple => Enum.Parse<SurveyButtonResponseType>(name),
         SurveyQuestionType.MultipleRepetitive => Enum.Parse<SurveyRepetitiveButtonResponseType>(name),
         _ => throw new NotImplementedException(),
     };




    private string Fill(Enum responseType) =>
         responseType switch
        {
            SurveyBooleanResponseType.ThumpsUp   => "#4DA456",
            SurveyBooleanResponseType.ThumpsDown => "#8ED974",
            SurveyRatingResponseType.OneSmile    => "#7cc769",
            SurveyRatingResponseType.TwoSmiles   => "#394241",
            SurveyRatingResponseType.ThreeSmiles => "#ffc700",
            SurveyRatingResponseType.FourSmiles  => "#8ED974",
            SurveyRatingResponseType.FiveSmiles  => "#4DA456",
            SurveyButtonResponseType.VeryCorrect => "4DA456",
            SurveyButtonResponseType.PartiallyCorrect => "394241",
            SurveyButtonResponseType.Correct => "ffc700",
            SurveyButtonResponseType.Incorrect => "8ED974",
            SurveyRepetitiveButtonResponseType.Greatly => "4DA456",
            SurveyRepetitiveButtonResponseType.Quite => "394241",
            SurveyRepetitiveButtonResponseType.Little => "ffc700",
            SurveyRepetitiveButtonResponseType.None => "8ED974",   
            _ => throw new NotImplementedException(),
        };


    public record QuestionResponseBar(string Question, IEnumerable<ResponseBar> ResponseBar);
}
