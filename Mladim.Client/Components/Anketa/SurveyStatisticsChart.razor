@using Mladim.Client.Models;
@using Mladim.Client.ViewModels.Survey;
@using Mladim.Domain.Enums;
@using Syncfusion.Blazor.Charts
@using Mladim.Domain.Extensions


<MudStack>

<MudText Color="Color.Tertiary" Typo="Typo.h2">@QuestionResponseStatistics.SurveyQuestion.Texts.FirstOrDefault()</MudText>

@foreach (var subQuestionResponse in QuestionResponseStatistics.QuestionResponseTypes.SubQuestionResponseTypes)
        {
            <SfChart Height="30" Width="100%">
                <ChartMargin Left="0" Right="0" Top="0" Bottom="0"></ChartMargin>
                <ChartPrimaryXAxis Visible="false" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"/>   
                <ChartPrimaryYAxis Visible="false"/>
                <ChartArea>
                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                </ChartArea>   
                <ChartSeriesCollection>
            @foreach (var seriesData in GetStackedBarData(QuestionResponseStatistics.SurveyQuestion.Type, subQuestionResponse).ToList())
                    {
                        <ChartSeries DataSource="@seriesData.Data" Fill="@seriesData.Fill" XName="@seriesData.XName" YName="@seriesData.YName" Type="ChartSeriesType.StackingBar100">

                            <ChartCornerRadius BottomLeft="@seriesData.LeftRadius" TopLeft="@seriesData.LeftRadius" BottomRight="@seriesData.RightRadius" TopRight="@seriesData.RightRadius" />
                            <ChartMarker>
                                <ChartDataLabel Visible="true" Name="Label" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle">                          
                                    <ChartDataLabelFont Color="#ffffff"></ChartDataLabelFont>
                                </ChartDataLabel>
                            </ChartMarker>
                        </ChartSeries>
                    }
                </ChartSeriesCollection>
            </SfChart>
        }

</MudStack>
    


@code 
{

    [Parameter]
    public QuestionResponseStatisticsVM QuestionResponseStatistics { get; set; }

    private List<ResponseBar> GetStackedBarData(SurveyQuestionType type, SubQuestionResponseTypesVM questionResponseStatistics)
    {
        var result = questionResponseStatistics.ResponseTypes
            .Select(rt => (enumType: StackedBarName(type, rt.ResponseType), value: rt.Value))
            .OrderBy(rt => rt.enumType)
            .Select(rt => (fill: Fill(rt.enumType), barList: new List<BarValue>(new[] { BarValue.CreateBarValue(rt.enumType.GetDisplayAttribute(), rt.value) })))
            .Select(bv => ResponseBar.CreateResponseBar(bv.fill, bv.barList))
            .ToList();

        result.First().LeftRadius = 10;
        result.Last().RightRadius = 10;

        return result;
    }

    private Enum StackedBarName(SurveyQuestionType type, string name) =>
     type switch
     {
         SurveyQuestionType.Boolean => Enum.Parse<SurveyBooleanResponseType>(name),
         SurveyQuestionType.Rating => Enum.Parse<SurveyRatingResponseType>(name),
         SurveyQuestionType.Multiple => Enum.Parse<SurveyButtonResponseType>(name),
         SurveyQuestionType.MultipleRepetitive => Enum.Parse<SurveyRepetitiveButtonResponseType>(name),
     };




    private string Fill(Enum responseType) =>
         responseType switch
        {
            SurveyBooleanResponseType.ThumpsUp   => "#4DA456",
            SurveyBooleanResponseType.ThumpsDown => "#8ED974",
            SurveyRatingResponseType.OneSmile    => "#7cc769",
            SurveyRatingResponseType.TwoSmiles   => "#394241",
            SurveyRatingResponseType.ThreeSmiles => "#ffc700",
            SurveyRatingResponseType.FourSmiles  => "#8ED974",
            SurveyRatingResponseType.FiveSmiles  => "#4DA456",
            SurveyButtonResponseType.VeryCorrect => "4DA456",
            SurveyButtonResponseType.PartiallyCorrect => "394241",
            SurveyButtonResponseType.Correct => "ffc700",
            SurveyButtonResponseType.Incorrect => "8ED974",
            SurveyRepetitiveButtonResponseType.Greatly => "4DA456",
            SurveyRepetitiveButtonResponseType.Quite => "394241",
            SurveyRepetitiveButtonResponseType.Little => "ffc700",
            SurveyRepetitiveButtonResponseType.None => "8ED974",           
        };
}
