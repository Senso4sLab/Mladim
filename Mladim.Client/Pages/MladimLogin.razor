@* @page "/login" *@
@using Mladim.Client.Services.PopupService
@layout LoginLayout
@inject IPopupService popupService


<PageTitle>Prijava</PageTitle>




<div class="d-flex flex-column justify-content-around" style="height:100vh;">
    <div style="padding-left:30px;">
        <img src="logo.png" height="40"/>
    </div>
    <div class="text-center">
        <lottie-player src="MladimLogo.json" background="transparent" speed="1" style="height: 210px;" loop autoplay></lottie-player>
        <div class="text-center">
            <button onclick="@(() =>OnAboutUsClicked())" type="button" class="btn btn-primary px-12 mx-1">O NAS</button>
            <button onclick="@(() =>OnLoginClicked())" type="button" class="btn btn-secondary px-12 mx-1">VPIS</button>
        </div>
    </div>

    <div class="scroll-container" style="height:300px;">
        <div class="carousel-primary @(IsMouseOnYouthOrganizationImg || popUpIsOpen ? "stop-animation" : "")">
            @foreach (var youthOrganization in YouthOrganizations)
            {
                <img @onmouseover="OnMouseOver" @onmouseleave="OnMouseLeave" onclick="@(() => OnYouthOrganizationClicked(youthOrganization))" src="@youthOrganization.ImgUrl" />
            }
        </div>
        <div class="carousel-primary carousel-secondary @(IsMouseOnYouthOrganizationImg || popUpIsOpen ? "stop-animation" : "")">
            @foreach (var youthOrganization in YouthOrganizations)
            {
                <img @onmouseover="OnMouseOver" @onmouseleave="OnMouseLeave" onclick="@(() => OnYouthOrganizationClicked(youthOrganization))" src="@youthOrganization.ImgUrl" />
            }
        </div>
    </div>
</div>


@code
{
    private IEnumerable<YouthOrganization> YouthOrganizations = new List<YouthOrganization>();


    bool IsMouseOnYouthOrganizationImg = false;
    bool popUpIsOpen = false;
    protected override void OnInitialized()
    {
        YouthOrganizations = GetYouthOrganizations().ToList();       
    }

    private IEnumerable<YouthOrganization> GetYouthOrganizations()
    {
        yield return new YouthOrganization("youth/youth1.jpeg");
        yield return new YouthOrganization("youth/youth2.png");
        yield return new YouthOrganization("youth/youth3.jpeg");
        yield return new YouthOrganization("youth/youth4.jpg");
    }


    private void OnMouseOver(MouseEventArgs mouseArg)
    {
        IsMouseOnYouthOrganizationImg = true;
        StateHasChanged();
    }

    private void OnMouseLeave(MouseEventArgs mouseArg)
    {
        IsMouseOnYouthOrganizationImg = false;
        StateHasChanged();
    }


    private async Task OnYouthOrganizationClicked(YouthOrganization youthOrganization)
    {
        popUpIsOpen = true;
        StateHasChanged();
        var result = await popupService.ShowYouthOrganizationDialog("", youthOrganization);
        popUpIsOpen = false;
        StateHasChanged();
    }

    private async Task OnAboutUsClicked()
    {
        popUpIsOpen = true;
        StateHasChanged();
        var result = await popupService.ShowAboutUsDialog("");
        popUpIsOpen = false;
        StateHasChanged();
    }

    private async Task OnLoginClicked()
    {
        popUpIsOpen = true;
        StateHasChanged();
        var result = await popupService.ShowLoginDialog("");
        popUpIsOpen = false;
        StateHasChanged();
    }



   
}

