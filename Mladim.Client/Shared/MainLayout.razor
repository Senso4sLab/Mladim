@using Mladim.Client.Models;
@using Mladim.Client.Services.SubjectServices.Contracts;
@using MudBlazor.Utilities;
@using Mladim.Domain.Models;

@inherits LayoutComponentBase

<MudThemeProvider Theme="MyCustomTheme" />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Elevation="0">      
        <MudSpacer />
        <UserLoginSettings />
    </MudAppBar>

    <MudDrawer @bind-Open="@_drawerOpen" Elevation="0" DisableOverlay=false Variant="DrawerVariant.Mini" OpenMiniOnHover=true MiniWidth="65px"  style="background-color:#4da456; ">
        <div style="height:50%; overflow:hidden; border-right:1px solid #eeeeee;background-color:#ffffff; border-radius: 0px 20px 0px 0px">
            <div style="padding: 30px 2px;">
                @if (_drawerOpen)
                {              
                    <MudImage Class="px-5" Src="logo.png" Height="43" Alt="Mladim logo"/>
                }
            </div>
            <MudNavMenu Color="Color.Primary" Style="font-family:Poppins; font-size: 0.9rem; font-weight: 400; line-height: 1.5;" Rounded=true Margin="Margin.Normal" Class="pa-2">
                @if(SelectedOrganization != null)
                {
                     <MudNavLink Class="navlink-hover" Href="/" Match="NavLinkMatch.All" Icon="@CustomIcons.Dashboard">Poročila</MudNavLink>
                }               
                <MudNavLink Class="navlink-hover" Href="/organization" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Description">Organizacija</MudNavLink>
                <MudNavLink Class="navlink-hover" Href="/projects" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ImportContacts">Projekti</MudNavLink>
                <MudNavLink Class="navlink-hover" Href="/activities" Match="NavLinkMatch.All" Icon="@CustomIcons.ActivityGrayFilled">Aktivnosti</MudNavLink>
            </MudNavMenu>          
        </div>
        <div style="height:50%; overflow:hidden; background-color:white;" >
            <div style="height:100%; width:100%; position:relative;  border-right:1px solid #eeeeee; border-radius: 0px 0px 20px 0px;" class="rounded-br-xl">
                @if (_drawerOpen)
                {
                    <img style="vertical-align:bottom; position:absolute; left:20px; bottom:10px;  width:80%;" src="calltoaction.png" alt="mobile"/>
                }
            </div>
        </div>
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            <CascadingValue Value="@OnSelectedOrganizationChanged">          
                <CascadingValue Value="@SelectedOrganization">
                      @Body
                </CascadingValue>
            </CascadingValue>
        </MudContainer>
    </MudMainContent>

</MudLayout>
  



@code 
{
    bool _drawerOpen = false;

    OrganizationVM? SelectedOrganization { get; set; } = null;   

    EventCallback<int> OnSelectedOrganizationChanged => EventCallback.Factory.Create<int>(this, GetSelectedOrganizationAsync);

    [Inject]
    protected IOrganizationService OrganizationService { get; set; } = default!;

    [Inject]
    protected NavigationManager Navigation{ get; set; }


    MudTheme MyCustomTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = new MudColor("#4da456"),
                Secondary = new MudColor("#6e7191"),
                Tertiary = new MudColor("43525d"),             
                AppbarBackground = new MudColor("#4da456"),               
                DrawerText = new MudColor("#000000"), 
                Success = new MudColor("#4da456"),
            },
            

            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new[] { "Lato", "Helvetica", "Arial", "sans-serif" },
                    FontSize = "0.9rem",
                    FontWeight = 400,
                    LineHeight = 1,
                },
                H1 = new H1() // user inputs, filenames of uploaded documents
                {
                    FontFamily = new[] { "Lato", "Helvetica", "Arial", "sans-serif" },
                    FontSize = "0.9rem",
                    FontWeight = 400,

                    LineHeight = 1,
                },
                H2 = new H2() // section title, card title, graph title, active-inactive slider, KPI value
                {
                    FontFamily = new[] { "Poppins", "Helvetica", "Arial", "sans-serif" },
                    FontSize = "1rem",
                    FontWeight = 600,
                    LineHeight = 1.3,
                },
                H3 = new H3() // tab headers (organization)
                {
                    FontFamily = new[] { "Poppins", "Helvetica", "Arial", "sans-serif" },
                    FontSize = "1rem",
                    FontWeight = 400,
                    LineHeight = 1.3,
                    TextTransform = "uppercase",
                },
                H4 = new H4() // menu item, random text (npr. navodila za change password)
                {
                    FontFamily = new[] { "Poppins", "Helvetica", "Arial", "sans-serif" },
                    FontSize = "0.9rem",
                    FontWeight = 400,
                    LineHeight = 1.5,
                },
                H5 = new H5() // card text
                {
                    FontFamily = new[] { "Lato", "Helvetica", "Arial", "sans-serif" },
                    FontSize = "0.9rem",
                    FontWeight = 400,
                    LineHeight = 1.5,
                },
                Body1 = new Body1() // table header
                {
                    FontFamily = new[] { "Poppins", "Helvetica", "Arial", "sans-serif" },
                    FontSize = "0.9rem",
                    FontWeight = 400,
                    LineHeight = 1.0,
                    LetterSpacing = "-0.024rem",
                },
                Body2 = new Body2() // table item, graph item
                {
                    FontFamily = new[] { "Poppins", "Helvetica", "Arial", "sans-serif" },
                    FontSize = "0.8rem",
                    FontWeight = 400,
                    LineHeight = 1.0,
                    LetterSpacing = "-0.024rem",
                },
                Button = new Button()
                {
                    FontFamily = new[] { "Poppins", "Helvetica", "Arial", "sans-serif" },
                    FontSize = "0.9rem",
                    FontWeight = 400,
                    LineHeight = 1.5,
                    TextTransform = "uppercase",
                },
            }
        };


    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }


    protected async override Task OnInitializedAsync()
    {
        var defaultOrganization = await OrganizationService.DefaultOrganizationAsync();

        if (defaultOrganization != null)
            await GetSelectedOrganizationAsync(defaultOrganization.Id);
        // else
        //     this.Navigation.NavigateTo("/organization");

    }

   

    private async Task GetSelectedOrganizationAsync(int organizationId)
    {
        var selectedOrganization = organizationId > 0 ? await this.OrganizationService.GetByIdAsync(organizationId) : null;
        if(selectedOrganization != null)
        {
            this.SelectedOrganization = selectedOrganization;
            await this.OrganizationService.SetDefaultOrganizationAsync(DefaultOrganization.Create(selectedOrganization));           
        }
        else
            this.SelectedOrganization = null;
    }
}

