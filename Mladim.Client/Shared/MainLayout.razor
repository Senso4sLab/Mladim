@using Mladim.Client.Models;
@using Mladim.Client.Services.SubjectServices.Contracts;
@using MudBlazor.Utilities;
@using Mladim.Domain.Models;

@inherits LayoutComponentBase

<MudThemeProvider Theme="MyCustomTheme" />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Elevation="0">      
        <MudSpacer />
        <UserLoginSettings />
    </MudAppBar>



    <MudDrawer @bind-Open="@_drawerOpen" Elevation="0" DisableOverlay=true Variant="DrawerVariant.Mini" OpenMiniOnHover=true MiniWidth="65px">
        <div class="bg-white rounded-tr-xl" style="height:100%; overflow:hidden">          
            @if (_drawerOpen)
            {
                <MudDrawerHeader Class="mt-5">
                    <MudText Typo="Typo.h6">Mladim</MudText>
                </MudDrawerHeader>
            }

            <MudNavMenu Color="Color.Primary" Rounded=true Margin="Margin.Normal" Class="pa-2">
                <MudNavLink Class="navlink-hover" Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard">Poročila</MudNavLink>
                <MudNavLink Class="navlink-hover" Href="/organization" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Description">Organizacija</MudNavLink>
                <MudNavLink Class="navlink-hover" Href="/projects" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ImportContacts">Projekti</MudNavLink>
                <MudNavLink Class="navlink-hover" Href="/activities" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Event">Aktivnosti</MudNavLink>
            </MudNavMenu>         
        </div>
    </MudDrawer>

    <MudMainContent>
        <MudContainer>
            <CascadingValue Value="@OnSelectedOrganizationChanged">          
                <CascadingValue Value="@SelectedOrganization">
                      @Body
                </CascadingValue>
            </CascadingValue>
        </MudContainer>
    </MudMainContent>

</MudLayout>
  



@code 
{
    bool _drawerOpen = false;

    OrganizationVM? SelectedOrganization { get; set; } = null;

    EventCallback<int> OnSelectedOrganizationChanged => EventCallback.Factory.Create<int>(this, GetSelectedOrganizationAsync);

    [Inject]
    protected IOrganizationService OrganizationService { get; set; } = default!;


    MudTheme MyCustomTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = new MudColor("#4da456"),//Colors.  Colors.Blue.Default,
                Secondary = new MudColor("#394241"),
                AppbarBackground = new MudColor("#4da456"),
                DrawerBackground = new MudColor("#4da456"),
                DrawerText = new MudColor("#000000"),                
            },                  
        };


    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }


    protected async override Task OnInitializedAsync()
    {
        var defaultOrganization = await OrganizationService.DefaultOrganizationAsync();

        if (defaultOrganization != null)
            await GetSelectedOrganizationAsync(defaultOrganization.Id);        
    }

    private async Task GetSelectedOrganizationAsync(int organizationId)
    {
        var selectedOrganization = organizationId > 0 ? await this.OrganizationService.GetByIdAsync(organizationId) : null;
        if(selectedOrganization != null)
        {
            this.SelectedOrganization = selectedOrganization;
            await this.OrganizationService.SetDefaultOrganizationAsync(DefaultOrganization.Create(selectedOrganization));           
        }
        else
            this.SelectedOrganization = null;
    }
}

